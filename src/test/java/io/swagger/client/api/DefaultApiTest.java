/*
 * ngDesk_Operations
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.Ticket;
import io.swagger.client.model.TicketMessage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Retrievs a ticket
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTicketTest() throws ApiException {
        String ticketId = null;
        String authenticationToken = null;
        String category = null;
        String statuses = null;
        String orderedColumn = null;
        String orderedBy = null;
        String clientId = null;
        String clientSecret = null;
        Ticket response = api.getTicket(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy, clientId, clientSecret);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve tickets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTicketsTest() throws ApiException {
        BigDecimal authenticationToken = null;
        Integer start = null;
        Integer length = null;
        Integer draw = null;
        String q = null;
        String sortBy = null;
        String sortByOrder = null;
        String passedAccountId = null;
        String passedUserId = null;
        Integer viewId = null;
        String clientId = null;
        String clientSecret = null;
        List<Ticket> response = api.getTickets(authenticationToken, start, length, draw, q, sortBy, sortByOrder, passedAccountId, passedUserId, viewId, clientId, clientSecret);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Insert a messages
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postMessagesTest() throws ApiException {
        Ticket body = null;
        String ticketId = null;
        String authenticationToken = null;
        String clientId = null;
        String clientSecret = null;
        api.postMessages(body, ticketId, authenticationToken, clientId, clientSecret);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Insert a tickets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTicketsTest() throws ApiException {
        List<TicketMessage> body = null;
        BigDecimal authenticationToken = null;
        String clientId = null;
        String clientSecret = null;
        Ticket response = api.postTickets(body, authenticationToken, clientId, clientSecret);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update tickets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putTicketsTest() throws ApiException {
        List<Ticket> body = null;
        Boolean authenticationToken = null;
        String clientId = null;
        String clientSecret = null;
        List<Ticket> response = api.putTickets(body, authenticationToken, clientId, clientSecret);

        // TODO: test validations
    }
    
}
