/*
 * ngDesk_Operations
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.Ticket;
import io.swagger.client.model.TicketMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getTicket
     * @param ticketId  (required)
     * @param authenticationToken  (optional)
     * @param category  (optional)
     * @param statuses  (optional)
     * @param orderedColumn  (optional)
     * @param orderedBy  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTicketCall(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "category", category));
        if (statuses != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "statuses", statuses));
        if (orderedColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ordered_column", orderedColumn));
        if (orderedBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ordered_by", orderedBy));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_id", clientId));
        if (clientSecret != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_secret", clientSecret));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTicketValidateBeforeCall(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling getTicket(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTicketCall(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy, clientId, clientSecret, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrievs a ticket
     * @param ticketId  (required)
     * @param authenticationToken  (optional)
     * @param category  (optional)
     * @param statuses  (optional)
     * @param orderedColumn  (optional)
     * @param orderedBy  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket getTicket(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy, String clientId, String clientSecret) throws ApiException {
        ApiResponse<Ticket> resp = getTicketWithHttpInfo(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy, clientId, clientSecret);
        return resp.getData();
    }

    /**
     * 
     * Retrievs a ticket
     * @param ticketId  (required)
     * @param authenticationToken  (optional)
     * @param category  (optional)
     * @param statuses  (optional)
     * @param orderedColumn  (optional)
     * @param orderedBy  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> getTicketWithHttpInfo(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy, String clientId, String clientSecret) throws ApiException {
        com.squareup.okhttp.Call call = getTicketValidateBeforeCall(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy, clientId, clientSecret, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrievs a ticket
     * @param ticketId  (required)
     * @param authenticationToken  (optional)
     * @param category  (optional)
     * @param statuses  (optional)
     * @param orderedColumn  (optional)
     * @param orderedBy  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTicketAsync(String ticketId, String authenticationToken, String category, String statuses, String orderedColumn, String orderedBy, String clientId, String clientSecret, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTicketValidateBeforeCall(ticketId, authenticationToken, category, statuses, orderedColumn, orderedBy, clientId, clientSecret, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTickets
     * @param authenticationToken User athentication uuid (optional)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param passedAccountId  (optional)
     * @param passedUserId  (optional)
     * @param viewId View Id (optional)
     * @param clientId API ID (optional)
     * @param clientSecret API Secret (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTicketsCall(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String passedAccountId, String passedUserId, Integer viewId, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (length != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "length", length));
        if (draw != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "draw", draw));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort_by", sortBy));
        if (sortByOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort_by_order", sortByOrder));
        if (passedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "passed_account_id", passedAccountId));
        if (passedUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "passed_user_id", passedUserId));
        if (viewId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "view_id", viewId));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_id", clientId));
        if (clientSecret != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_secret", clientSecret));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTicketsValidateBeforeCall(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String passedAccountId, String passedUserId, Integer viewId, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getTicketsCall(authenticationToken, start, length, draw, q, sortBy, sortByOrder, passedAccountId, passedUserId, viewId, clientId, clientSecret, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve tickets
     * @param authenticationToken User athentication uuid (optional)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param passedAccountId  (optional)
     * @param passedUserId  (optional)
     * @param viewId View Id (optional)
     * @param clientId API ID (optional)
     * @param clientSecret API Secret (optional)
     * @return List&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Ticket> getTickets(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String passedAccountId, String passedUserId, Integer viewId, String clientId, String clientSecret) throws ApiException {
        ApiResponse<List<Ticket>> resp = getTicketsWithHttpInfo(authenticationToken, start, length, draw, q, sortBy, sortByOrder, passedAccountId, passedUserId, viewId, clientId, clientSecret);
        return resp.getData();
    }

    /**
     * 
     * Retrieve tickets
     * @param authenticationToken User athentication uuid (optional)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param passedAccountId  (optional)
     * @param passedUserId  (optional)
     * @param viewId View Id (optional)
     * @param clientId API ID (optional)
     * @param clientSecret API Secret (optional)
     * @return ApiResponse&lt;List&lt;Ticket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Ticket>> getTicketsWithHttpInfo(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String passedAccountId, String passedUserId, Integer viewId, String clientId, String clientSecret) throws ApiException {
        com.squareup.okhttp.Call call = getTicketsValidateBeforeCall(authenticationToken, start, length, draw, q, sortBy, sortByOrder, passedAccountId, passedUserId, viewId, clientId, clientSecret, null, null);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve tickets
     * @param authenticationToken User athentication uuid (optional)
     * @param start Start query value (optional)
     * @param length Number of rows query (optional)
     * @param draw Number of times table has been reloaded (optional)
     * @param q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param sortBy Column name to order table by (optional)
     * @param sortByOrder Sort by ascending or descending (optional)
     * @param passedAccountId  (optional)
     * @param passedUserId  (optional)
     * @param viewId View Id (optional)
     * @param clientId API ID (optional)
     * @param clientSecret API Secret (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTicketsAsync(BigDecimal authenticationToken, Integer start, Integer length, Integer draw, String q, String sortBy, String sortByOrder, String passedAccountId, String passedUserId, Integer viewId, String clientId, String clientSecret, final ApiCallback<List<Ticket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTicketsValidateBeforeCall(authenticationToken, start, length, draw, q, sortBy, sortByOrder, passedAccountId, passedUserId, viewId, clientId, clientSecret, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postMessages
     * @param body The request body for the operation (required)
     * @param ticketId  (required)
     * @param authenticationToken User athentication (optional)
     * @param clientId api client (optional)
     * @param clientSecret api secret (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postMessagesCall(Ticket body, String ticketId, String authenticationToken, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tickets/{ticket_id}/messages"
            .replaceAll("\\{" + "ticket_id" + "\\}", apiClient.escapeString(ticketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_id", clientId));
        if (clientSecret != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_secret", clientSecret));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postMessagesValidateBeforeCall(Ticket body, String ticketId, String authenticationToken, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postMessages(Async)");
        }
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling postMessages(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postMessagesCall(body, ticketId, authenticationToken, clientId, clientSecret, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Insert a messages
     * @param body The request body for the operation (required)
     * @param ticketId  (required)
     * @param authenticationToken User athentication (optional)
     * @param clientId api client (optional)
     * @param clientSecret api secret (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postMessages(Ticket body, String ticketId, String authenticationToken, String clientId, String clientSecret) throws ApiException {
        postMessagesWithHttpInfo(body, ticketId, authenticationToken, clientId, clientSecret);
    }

    /**
     * 
     * Insert a messages
     * @param body The request body for the operation (required)
     * @param ticketId  (required)
     * @param authenticationToken User athentication (optional)
     * @param clientId api client (optional)
     * @param clientSecret api secret (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postMessagesWithHttpInfo(Ticket body, String ticketId, String authenticationToken, String clientId, String clientSecret) throws ApiException {
        com.squareup.okhttp.Call call = postMessagesValidateBeforeCall(body, ticketId, authenticationToken, clientId, clientSecret, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Insert a messages
     * @param body The request body for the operation (required)
     * @param ticketId  (required)
     * @param authenticationToken User athentication (optional)
     * @param clientId api client (optional)
     * @param clientSecret api secret (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postMessagesAsync(Ticket body, String ticketId, String authenticationToken, String clientId, String clientSecret, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postMessagesValidateBeforeCall(body, ticketId, authenticationToken, clientId, clientSecret, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postTickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTicketsCall(List<TicketMessage> body, BigDecimal authenticationToken, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_id", clientId));
        if (clientSecret != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_secret", clientSecret));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTicketsValidateBeforeCall(List<TicketMessage> body, BigDecimal authenticationToken, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postTickets(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postTicketsCall(body, authenticationToken, clientId, clientSecret, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Insert a tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket postTickets(List<TicketMessage> body, BigDecimal authenticationToken, String clientId, String clientSecret) throws ApiException {
        ApiResponse<Ticket> resp = postTicketsWithHttpInfo(body, authenticationToken, clientId, clientSecret);
        return resp.getData();
    }

    /**
     * 
     * Insert a tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> postTicketsWithHttpInfo(List<TicketMessage> body, BigDecimal authenticationToken, String clientId, String clientSecret) throws ApiException {
        com.squareup.okhttp.Call call = postTicketsValidateBeforeCall(body, authenticationToken, clientId, clientSecret, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Insert a tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTicketsAsync(List<TicketMessage> body, BigDecimal authenticationToken, String clientId, String clientSecret, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTicketsValidateBeforeCall(body, authenticationToken, clientId, clientSecret, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTicketsCall(List<Ticket> body, Boolean authenticationToken, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (authenticationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "authentication_token", authenticationToken));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_id", clientId));
        if (clientSecret != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_secret", clientSecret));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTicketsValidateBeforeCall(List<Ticket> body, Boolean authenticationToken, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putTickets(Async)");
        }
        
        
        com.squareup.okhttp.Call call = putTicketsCall(body, authenticationToken, clientId, clientSecret, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return List&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Ticket> putTickets(List<Ticket> body, Boolean authenticationToken, String clientId, String clientSecret) throws ApiException {
        ApiResponse<List<Ticket>> resp = putTicketsWithHttpInfo(body, authenticationToken, clientId, clientSecret);
        return resp.getData();
    }

    /**
     * 
     * Update tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return ApiResponse&lt;List&lt;Ticket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Ticket>> putTicketsWithHttpInfo(List<Ticket> body, Boolean authenticationToken, String clientId, String clientSecret) throws ApiException {
        com.squareup.okhttp.Call call = putTicketsValidateBeforeCall(body, authenticationToken, clientId, clientSecret, null, null);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update tickets
     * @param body The request body for the operation (required)
     * @param authenticationToken User athentication uuid (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTicketsAsync(List<Ticket> body, Boolean authenticationToken, String clientId, String clientSecret, final ApiCallback<List<Ticket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTicketsValidateBeforeCall(body, authenticationToken, clientId, clientSecret, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
